org: gugazimmermann
app: pocz-api
service: auth-api

resources:
  - Description: Auth API for ${env:PROJECT_NAME}

frameworkVersion: "2"
useDotenv: true
variablesResolutionMode: 20210326

package:
  individually: true

plugins:
  - serverless-bundle
  - serverless-offline
  - serverless-dotenv-plugin
  - serverless-iam-roles-per-function

custom:
  bundle:
    ignorePackages:
      - pg-native
    forceExclude:
      - pg
      - pg-hstore
      - dotenv
      - sequelize

provider:
  name: aws
  runtime: nodejs14.x
  stage: ${opt:stage, "development"}
  region: us-east-1
  lambdaHashingVersion: 20201221
  environment:
    NODE_ENV: ${self:provider.stage}
    JWT_SECRET: ${env:JWT_SECRET}
    PROJECT_NAME: ${env:PROJECT_NAME}
    PROJECT_APP_URL: ${env:PROJECT_APP_URL}
  tracing:
    lambda: true
  iamRoleStatements:
    - Effect: Allow
      Action:
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
      Resource: "*"
  apiGateway:
    restApiId:
      'Fn::ImportValue': ${self:provider.stage}-ApiGatewayRestApiId
    restApiRootResourceId:
      'Fn::ImportValue': ${self:provider.stage}-ApiGatewayRestApiRootResourceId

functions:
  register:
    handler: register.handler
    events:
      - http:
          path: /auth/register
          method: post
          cors: true
    layers:
      - ${cf:api-${self:provider.stage}.PgLambdaLayerQualifiedArn}
      - ${cf:api-${self:provider.stage}.DotenvPgSequelizeLambdaLayerQualifiedArn}

  login:
    handler: login.handler
    events:
      - http:
          path: /auth/login
          method: post
          cors: true
    layers:
      - ${cf:api-${self:provider.stage}.PgLambdaLayerQualifiedArn}
      - ${cf:api-${self:provider.stage}.DotenvPgSequelizeLambdaLayerQualifiedArn}

  forgot-password:
    handler: forgot-password.handler
    events:
      - http:
          path: /auth/forgot-password
          method: post
          cors: true
    layers:
      - ${cf:api-${self:provider.stage}.PgLambdaLayerQualifiedArn}
      - ${cf:api-${self:provider.stage}.DotenvPgSequelizeLambdaLayerQualifiedArn}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - "ses:SendEmail"
          - "ses:SendRawEmail"
        Resource: "*"

  forgot-password-code:
    handler: forgot-password-code.handler
    events:
      - http:
          path: /auth/forgot-password-code
          method: post
          cors: true
    layers:
      - ${cf:api-${self:provider.stage}.PgLambdaLayerQualifiedArn}
      - ${cf:api-${self:provider.stage}.DotenvPgSequelizeLambdaLayerQualifiedArn}

  change-password:
    handler: change-password.handler
    events:
      - http:
          path: /auth/change-password
          method: post
          cors: true
    layers:
      - ${cf:api-${self:provider.stage}.PgLambdaLayerQualifiedArn}
      - ${cf:api-${self:provider.stage}.DotenvPgSequelizeLambdaLayerQualifiedArn}

  refresh-token:
      handler: refresh-token.handler
      events:
        - http:
            path: /auth/refresh-token
            method: post
            cors: true
      layers:
        - ${cf:api-${self:provider.stage}.PgLambdaLayerQualifiedArn}
        - ${cf:api-${self:provider.stage}.DotenvPgSequelizeLambdaLayerQualifiedArn}

  verify:
    handler: verify.handler

  me:
    handler: me.handler
    events:
      - http:
          path: /auth/me
          method: get
          cors: true
          authorizer:
            name: verify
            identitySource: method.request.header.Authorization 
            resultTtlInSeconds: 3600
    layers:
      - ${cf:api-${self:provider.stage}.PgLambdaLayerQualifiedArn}
      - ${cf:api-${self:provider.stage}.DotenvPgSequelizeLambdaLayerQualifiedArn}
