org: gugazimmermann
app: pocz-api
service: auth-api

resources:
  - Description: Auth API for ${env:PROJECT_NAME}

frameworkVersion: "2"
useDotenv: true
variablesResolutionMode: 20210326

package:
  individually: true

plugins:
  - serverless-bundle
  - serverless-offline
  - serverless-dotenv-plugin
  
custom:
  bundle:
    ignorePackages:
      - pg-native
  variables:
    POSTGRES_SG: ${env:POSTGRES_SG, 'sg-111'}
    POSTGRES_SN_1: ${env:POSTGRES_SN_1, 'subnet-111'}
    POSTGRES_SN_2: ${env:POSTGRES_SN_2, 'subnet-222'}
    POSTGRES_SN_3: ${env:POSTGRES_SN_3, 'subnet-333'}
    POSTGRES_SN_4: ${env:POSTGRES_SN_4, 'subnet-444'}
    POSTGRES_SN_5: ${env:POSTGRES_SN_5, 'subnet-555'}
    POSTGRES_SN_6: ${env:POSTGRES_SN_6, 'subnet-666'}
  lambdaPolicyXRay:
    Effect: Allow
    Action:
      - xray:PutTraceSegments
      - xray:PutTelemetryRecords
    Resource: "*"

provider:
  name: aws
  runtime: nodejs14.x
  stage: ${opt:stage, "development"}
  lambdaHashingVersion: 20201221
  vpc:
    securityGroupIds:
      - ${self:custom.variables.POSTGRES_SG}
    subnetIds:
      - ${self:custom.variables.POSTGRES_SN_1}
      - ${self:custom.variables.POSTGRES_SN_2}
      - ${self:custom.variables.POSTGRES_SN_3}
      - ${self:custom.variables.POSTGRES_SN_4}
      - ${self:custom.variables.POSTGRES_SN_5}
      - ${self:custom.variables.POSTGRES_SN_6}
  region: us-east-1
  environment:
    NODE_ENV: ${self:provider.stage}
    JWT_SECRET: ${env:JWT_SECRET}
  tracing:
    lambda: true
  iamRoleStatements:
    - ${self:custom.lambdaPolicyXRay}
  apiGateway:
    restApiId:
      'Fn::ImportValue': ${self:provider.stage}-ApiGatewayRestApiId
    restApiRootResourceId:
      'Fn::ImportValue': ${self:provider.stage}-ApiGatewayRestApiRootResourceId

functions:
  register:
    handler: register.handler
    events:
      - http:
          path: /auth/register
          method: post
          cors: true
    layers:
      - ${cf:api-${self:provider.stage}.PgLambdaLayerQualifiedArn}
      - ${cf:api-${self:provider.stage}.DotenvPgSequelizeLambdaLayerQualifiedArn}

  login:
    handler: login.handler
    events:
      - http:
          path: /auth/login
          method: post
          cors: true
    layers:
      - ${cf:api-${self:provider.stage}.PgLambdaLayerQualifiedArn}
      - ${cf:api-${self:provider.stage}.DotenvPgSequelizeLambdaLayerQualifiedArn}

  verify:
    handler: verify.handler

  me:
    handler: me.handler
    events:
      - http:
          path: /auth/me
          method: get
          cors: true
          authorizer:
            name: verify
            identitySource: method.request.header.Authorization 
            resultTtlInSeconds: 3600
    layers:
      - ${cf:api-${self:provider.stage}.PgLambdaLayerQualifiedArn}
      - ${cf:api-${self:provider.stage}.DotenvPgSequelizeLambdaLayerQualifiedArn}
