service: pocz-api
frameworkVersion: '3'
useDotenv: true
variablesResolutionMode: 20210326

resources:
  Description: The main stack for ${env:PROJECT_NAME}

package:
  individually: true

plugins:
  - serverless-bundle
  - serverless-offline
  - serverless-dotenv-plugin
  - serverless-iam-roles-per-function

custom:
  bundle:
    ignorePackages:
      - pg-native
    forceExclude:
      - pg
      - pg-hstore
      - dotenv
      - sequelize

provider:
  name: aws
  runtime: nodejs14.x
  region: us-east-1
  profile: default
  stage: ${opt:stage, "development"}
  lambdaHashingVersion: 20201221
  environment:
    NODE_ENV: ${self:provider.stage}
    JWT_SECRET: ${env:JWT_SECRET}
    PROJECT_NAME: ${env:PROJECT_NAME}
    PROJECT_APP_URL: ${env:PROJECT_APP_URL}
  httpApi:
    name: ${self:service}-${opt:stage, "development"}
    metrics: true
    cors: true
    payload: "2.0"
    authorizers:
      authAuthorizer:
        type: request
        functionName: auth-verify
  logs:
    httpApi: true
  tracing:
    lambda: true
  iamRoleStatements:
    - Effect: Allow
      Action:
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
      Resource: '*'

layers:
  pg:
    path: layers/postgre
    description: 'PostgreSQL Dependencies'
  dotenvPgSequelize:
    package:
      artifact: layers/dotenv_pg_sequelize/DotenvPgSequelize.zip
    description: 'dotenv 10.0.0 pg 8.7.1 pg-hstore 2.3.4 sequelize 6.7.0'

functions:
  healthCheck:
    handler: services/test-db/handler.healthCheck
    events:
      - httpApi:
          path: /
          method: get
    layers:
      - !Ref PgLambdaLayer
      - !Ref DotenvPgSequelizeLambdaLayer

  auth-verify:
    handler: services/auth-api/verify.handler

  auth:
    handler: services/auth-api/handler.handler
    events:
      - httpApi:
          path: /auth/register
          method: post
      - httpApi:
          path: /auth/login
          method: post
      - httpApi:
          path: /auth/forgot-password
          method: post
      - httpApi:
          path: /auth/forgot-password-code
          method: post
      - httpApi:
          path: /auth/change-password
          method: post
      - httpApi:
          path: /auth/refresh-token
          method: post
      - httpApi:
          path: /auth/me
          method: post
          authorizer:
            name: authAuthorizer
    layers:
      - !Ref PgLambdaLayer
      - !Ref DotenvPgSequelizeLambdaLayer
    iamRoleStatements:
      - Effect: Allow
        Action:
          - 'ses:SendEmail'
          - 'ses:SendRawEmail'
        Resource: '*'

  subscriptions:
    handler: services/subscriptions-api/handler.handler
    events:
      - httpApi:
          path: /subscriptions
          method: post
          authorizer:
            name: authAuthorizer
      - httpApi:
          path: /subscriptions/plans
          method: post
      - httpApi:
          path: /subscriptions/payments
          method: post
          authorizer:
            name: authAuthorizer
      - httpApi:
          path: /subscriptions/credit-cards
          method: post
          authorizer:
            name: authAuthorizer
    layers:
      - !Ref PgLambdaLayer
      - !Ref DotenvPgSequelizeLambdaLayer

  places:
    handler: services/places-api/handler.handler
    events:
      - httpApi:
          path: /places
          method: post
          authorizer:
            name: authAuthorizer
      - httpApi:
          path: /places/get/{id}
          method: post
          authorizer:
            name: authAuthorizer
      - httpApi:
          path: /places/create
          method: post
          authorizer:
            name: authAuthorizer
      - httpApi:
          path: /places/delete/{id}
          method: post
          authorizer:
            name: authAuthorizer
      - httpApi:
          path: /places/update/{id}
          method: post
          authorizer:
            name: authAuthorizer
      - httpApi:
          path: /places/count
          method: post
          authorizer:
            name: authAuthorizer
      - httpApi:
          path: /places/active/{id}
          method: post
          authorizer:
            name: authAuthorizer
      - httpApi:
          path: /places/managers/{id}
          method: post
          authorizer:
            name: authAuthorizer
      - httpApi:
          path: /places/employees/{id}
          method: post
          authorizer:
            name: authAuthorizer
    layers:
      - !Ref PgLambdaLayer
      - !Ref DotenvPgSequelizeLambdaLayer

  # TODO: Lambda to handle the avatar image
  profiles:
    handler: services/profiles-api/handler.handler
    events:
      - httpApi:
          path: /profiles
          method: post
          authorizer:
            name: authAuthorizer
      - httpApi:
          path: /profiles/create
          method: post
          authorizer:
            name: authAuthorizer
    layers:
      - !Ref PgLambdaLayer
      - !Ref DotenvPgSequelizeLambdaLayer

  members:
    handler: services/members-api/handler.handler
    events:
      - httpApi:
          path: /members
          method: post
          authorizer:
            name: authAuthorizer
      - httpApi:
          path: /members/list
          method: post
          authorizer:
            name: authAuthorizer
      - httpApi:
          path: /members/get/{id}
          method: post
          authorizer:
            name: authAuthorizer
      - httpApi:
          path: /members/create
          method: post
          authorizer:
            name: authAuthorizer
      - httpApi:
          path: /members/invites
          method: post
          authorizer:
            name: authAuthorizer
      - httpApi:
          path: /members/invites/code/{code}
          method: post
          authorizer:
            name: authAuthorizer
      - httpApi:
          path: /members/invites/create
          method: post
          authorizer:
            name: authAuthorizer
      - httpApi:
          path: /members/invites/send/{id}
          method: post
          authorizer:
            name: authAuthorizer
      - httpApi:
          path: /members/invites/delete/{id}
          method: post
          authorizer:
            name: authAuthorizer
    layers:
      - !Ref PgLambdaLayer
      - !Ref DotenvPgSequelizeLambdaLayer
    iamRoleStatements:
      - Effect: Allow
        Action:
          - 'ses:SendEmail'
          - 'ses:SendRawEmail'
        Resource: '*'
