org: gugazimmermann
app: pocz-api
service: api

frameworkVersion: "2"
useDotenv: true
variablesResolutionMode: 20210326

package:
  individually: true

plugins:
  - serverless-bundle
  - serverless-offline
  - serverless-dotenv-plugin
  - serverless-domain-manager
  - serverless-sequelize-migrations

custom:
  bundle:
    ignorePackages:
      - pg-native
  customDomain:
    domainName: ${env:PROJECT_API_DOMAIN}
    basePath: ""
    stage: ${self:provider.stage}
    createRoute53Record: true
    endpointType: "regional"
    securityPolicy: tls_1_2

provider:
  name: aws
  runtime: nodejs14.x
  stage: ${opt:stage, "development"}
  region: us-east-1
  lambdaHashingVersion: 20201221
  environment:
    NODE_ENV: ${self:provider.stage}
    JWT_SECRET: ${env:JWT_SECRET}
  tracing:
    lambda: true
  iamRoleStatements:
    - Effect: Allow
      Action:
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
      Resource: "*"
      
layers:
  pg:
    path: layers/postgre
    description: "PostgreSQL Dependencies"
  dotenvPgSequelize:
    package:
      artifact: layers/dotenv_pg_sequelize/DotenvPgSequelize.zip
    description: "dotenv 10.0.0 pg 8.7.1 pg-hstore 2.3.4 sequelize 6.7.0"

functions:
  healthCheck:
    handler: services/test-db/handler.healthCheck
    events:
      - http:
          path: /
          method: get
          cors: true
    layers:
      - { Ref: PgLambdaLayer }
      - { Ref: DotenvPgSequelizeLambdaLayer }

resources:
  - Description: The main stack for ${env:PROJECT_NAME}
  - Outputs:
      ApiGatewayRestApiId:
        Value:
          Ref: ApiGatewayRestApi
        Export:
          Name: ${self:provider.stage}-ApiGatewayRestApiId
    
      ApiGatewayRestApiRootResourceId:
        Value:
           Fn::GetAtt:
            - ApiGatewayRestApi
            - RootResourceId 
        Export:
          Name: ${self:provider.stage}-ApiGatewayRestApiRootResourceId